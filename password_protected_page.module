<?php

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\password_protected_page\PasswordClass;




/**
 * Implements hook_node_view().
 */
function password_protected_page_node_view(array &$build, \Drupal\node\NodeInterface $node, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode)
{
    if ($node->getType() === 'page') {
        $build['#cache']['max-age'] = 0; //常にcacheを削除する 
        //パスワードが入力されていたら
        if ($node->hasField('field_page_password') && !empty($node->get('field_page_password')->value)) {
            $PasswordClass = new PasswordClass($node->id());
            if (!$PasswordClass->validateCheckPass()) {
                unset($build['body']);
                $form = \Drupal::formBuilder()->getForm('Drupal\password_protected_page\Form\PasswordForm', $node->id());
                $build['password_form'] = $form; // パスワードフォームを追加
            }
        }
    }
}


function password_protected_page_install()
{
    FieldStorageConfig::create([
        'field_name' => 'field_page_password',
        'entity_type' => 'node',
        'type' => 'string',
        // 'settings' => [
        //     'is_password' => true,
        // ],
    ])->save();


    FieldConfig::create([
        'field_name' => 'field_page_password',
        'entity_type' => 'node',
        'bundle' => 'page',
        'label' => 'パスワード保護',
        'widget' => [
            'type' => 'string_textfield',
        ],
    ])->save();

    // フィールドのフォーム表示設定を追加
    \Drupal::service('entity_display.repository')->getFormDisplay('node', 'page', 'default')
        ->setComponent('field_page_password', [
            'type' => 'string_textfield',
        ])->save();

    // // フィールドのデフォルト表示設定を追加
    // \Drupal::service('entity_display.repository')->getViewDisplay('node', 'page', 'default')
    //     ->setComponent('field_page_password', [
    //         'label' => 'above',
    //         'type' => 'string',
    //     ])->save();
}


/**
 * Implements hook_uninstall().
 */
function password_protected_page_uninstall()
{
    // フィールドの削除
    $field_storage = FieldStorageConfig::loadByName('node', 'field_page_password');
    if ($field_storage) {
        $field_storage->delete();
    }
}


/**
 * Implements hook_form_alter().
 */
function password_protected_page_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
    // 特定のフォームIDを確認（例: 「page」コンテンツタイプのノードフォーム）
    if ($form_id == 'node_page_form' || $form_id == 'node_page_edit_form') {
        // 半角英数のみを許可するカスタムバリデーション関数を追加
        $form['#validate'][] = 'password_protected_page_custom_validation';

        $form['#attached']['library'][] = 'password_protected_page/password_protected_page.libraries';

        $current_weight = isset($form['field_page_password']['#weight']) ? $form['field_page_password']['#weight'] : 0;

        $form['password_toggle'] = [
            '#type' => 'button',
            '#value' => 'パスワードを切り替え',
            '#attributes' => ['class' => ['password-toggle-button']],
            '#weight' => $current_weight + 1, //順番を指定
        ];

        if (isset($form['field_page_password'])) {
            //$form['field_page_password']['widget'][0]['value']['#type'] = 'password';
            //valueが消えるためコメントアウトしてjsからpasswordにする
        }
    }
}

function password_protected_page_custom_validation($form, \Drupal\Core\Form\FormStateInterface $form_state)
{
    $items = $form_state->getValue('field_page_password'); //複数で返される

    if (!empty($items[0]) && !empty($items[0]['value'])) {
        $value = $items[0]['value'];

        if (strlen($value) < 5) {
            $form_state->setErrorByName('field_page_password', "パスワードは5文字以上で入力してください。");
        }

        // 半角英数以外の文字が含まれているかチェック
        if (!preg_match('/^[a-zA-Z0-9]+$/', $value)) {
            // 半角英数以外の文字があれば、バリデーションエラーを設定
            $form_state->setErrorByName('field_page_password', "パスワード保護は半角英数で入力してください");
        }
    }
}
